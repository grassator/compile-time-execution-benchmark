counter :: fn() -> (s64) {
  i := 0
  while i < 1000000 { i = i + 1 }
  i
}
counted :: counter()

main :: fn() {
  print(counted)
  print("\n")
}

cached_stdout_handle := 0
startup(fn() {
  cached_stdout_handle = GetStdHandle(-11)
})

ExitProcess :: fn(status : s32) -> (s64) external("kernel32.dll", "ExitProcess")
GetStdHandle :: fn(handle : s32) -> (s64) external("kernel32.dll", "GetStdHandle")
WriteFile :: fn(
  status : s64,
  buffer : [u8],
  size : s32,
  bytes_written : s64,
  overlapped : s64
) -> (s64) external("kernel32.dll", "WriteFile")

print :: macro(string : String) -> () {
  WriteFile(cached_stdout_handle, string.bytes, cast(s32, string.length), 0, 0)
}

print :: fn(integer : s64) {
  count := {
    count := 0
    for temp := integer ; temp ; temp = temp / 10 {
      count = count + 1
    }
    if count then count else 1
  }

  buffer : u8[64]
  output_size := if integer < 0 then {
    minus_code :: "-".bytes.0
    buffer.0 = minus_code
    integer = 0 - integer
    count + 1
  } else {
    count
  }

  for integer_index := 0 ; integer_index < count ; {
    integer_index = integer_index + 1
    digit := cast(u8, integer % 10)
    digit_index := output_size - integer_index
    zero_code :: "0".bytes.0
    buffer.(digit_index) = zero_code + digit
    integer = integer / 10
  }
  WriteFile(cached_stdout_handle, &buffer, cast(s32, output_size), 0, 0)
}
